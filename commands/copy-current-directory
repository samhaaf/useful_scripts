#!/bin/bash

shopt -s extglob

# Function to copy output to clipboard
copy_to_clipboard() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        pbcopy
    else
        # Linux and others
        xclip -selection clipboard
    fi
}

# Function to recursively list files, checking against ignore patterns
list_files() {
    local current_path="$1"

    if [ -f "$current_path" ]; then
        # If it's a file, print its contents
        printf "\n\`\`\`%s\n" "$current_path";
        cat "$current_path";
        printf "\n\`\`\`\n"
        return
    fi

    for entry in "$current_path"/*; do
        local base_entry=$(basename "$entry")

        for pattern in "${ignore_patterns[@]}"; do
            if [[ $base_entry == $pattern ]] || [[ $base_entry =~ $pattern ]] ; then
                continue 2
            fi
        done

        local relative_path="$current_path/$base_entry"

        if [ -d "$entry" ]; then
            list_files "$relative_path"
        else
            printf "\n\`\`\`%s\n" "$relative_path";
            cat "$entry";
            printf "\n\`\`\`\n"
        fi
    done
}

# Parsing command line arguments
copy_output=true
while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do case $1 in
  --print )
    copy_output=false
    ;;
esac; shift; done
if [[ "$1" == '--' ]]; then shift; fi

# Set initial directory variables
initial_dir="."
if [ -n "$1" ]; then
    initial_dir="$1"
fi
initial_dir="${initial_dir%/}"  # Remove trailing slash if exists

# Array of patterns to ignore
ignore_patterns=('\.git' '__pycache__' '.*\.bin$')

# Start the recursive file listing
if $copy_output; then
    list_files "$initial_dir" | copy_to_clipboard
else
    list_files "$initial_dir"
fi
